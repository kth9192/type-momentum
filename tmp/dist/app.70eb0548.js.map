{"version":3,"sources":["src/ts/controller/controller.ts","src/ts/model/todoModel.ts","src/ts/view/todoView.ts","src/config.ts","src/ts/model/weatherModel.ts","src/ts/view/weatherView.ts","src/ts/controller/weatherController.ts","src/ts/model/bgModel.ts","ts/view/bgView.ts","src/ts/controller/bgController.ts","src/ts/app.ts"],"names":[],"mappings":"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","file":"app.70eb0548.js","sourceRoot":"..\\src","sourcesContent":["import { todoJSON } from \"./../../interface/interface\";\r\nimport View from \"../view/todoView\";\r\nimport TodoModel from \"../model/todoModel\";\r\n\r\nclass Controller {\r\n  view: View;\r\n  todoModel: TodoModel;\r\n\r\n  constructor(contactView: View, contactModel: TodoModel) {\r\n    this.view = contactView;\r\n    this.todoModel = contactModel;\r\n\r\n    this.todoModel.bindTodoListChanged(this.onTodoListChanged);\r\n    this.view.bindAddTodo(this.handleAddTodo);\r\n    this.view.bindRemoveTodo(this.handleRemoveTodo);\r\n\r\n    this.onTodoListChanged(this.todoModel.todoArray);\r\n  }\r\n\r\n  onTodoListChanged = (todos: Array<todoJSON>) => {\r\n    this.view.displayTodos(todos);\r\n  };\r\n\r\n  handleAddTodo = (todoText: string) => {\r\n    this.todoModel.saveToDoList(todoText);\r\n  };\r\n\r\n  handleRemoveTodo = (id: number) => {\r\n    this.todoModel.deleteToDo(id);\r\n  };\r\n}\r\n\r\nexport default Controller;\r\n","import { todoJSON } from \"../../interface/interface\";\r\n\r\nclass TodoModel {\r\n  private TODO_STORAGE: string;\r\n  public todoArray: Array<todoJSON>;\r\n  onTodoListChanged!: Function;\r\n\r\n  constructor() {\r\n    this.TODO_STORAGE = \"ToDo\";\r\n    this.todoArray = this.loadToDoList();\r\n  }\r\n\r\n  bindTodoListChanged(callback: Function) {\r\n    this.onTodoListChanged = callback;\r\n  }\r\n\r\n  _commit(todos: Array<todoJSON>) {\r\n    this.onTodoListChanged(todos);\r\n    localStorage.setItem(this.TODO_STORAGE, JSON.stringify(this.todoArray));\r\n  }\r\n\r\n  loadToDoList(): Array<todoJSON> {\r\n    const loadedToDo = localStorage.getItem(this.TODO_STORAGE);\r\n\r\n    if (loadedToDo !== null) {\r\n      const parseTodo = JSON.parse(loadedToDo);\r\n      return parseTodo;\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  saveToDoList(saveTxt: string) {\r\n    const todo = {\r\n      id:\r\n        this.todoArray.length > 0\r\n          ? this.todoArray[this.todoArray.length - 1].id + 1\r\n          : 1,\r\n      text: saveTxt\r\n    };\r\n    this.todoArray.push(todo);\r\n\r\n    this._commit(this.todoArray);\r\n  }\r\n\r\n  deleteToDo(id: number) {\r\n    this.todoArray = this.todoArray.filter(toDo => {\r\n      console.log(\"====================================\");\r\n      console.log(\"todo\", typeof id);\r\n      console.log(\"====================================\");\r\n      return toDo.id !== id;\r\n    });\r\n\r\n    console.log(\"====================================\");\r\n    console.log(\"삭제\", this.todoArray, id);\r\n    console.log(\"====================================\");\r\n    this._commit(this.todoArray);\r\n  }\r\n}\r\n\r\nexport default TodoModel;\r\n","import { todoJSON } from \"../../interface/interface\";\r\n\r\nclass View {\r\n  center: HTMLElement;\r\n  todoForm: HTMLElement;\r\n  todoList: HTMLElement;\r\n  li!: HTMLElement;\r\n  deleteBtn!: HTMLElement;\r\n  span!: HTMLElement;\r\n  chkBox!: HTMLInputElement;\r\n  icon!: HTMLElement;\r\n  todo__form_input: HTMLInputElement;\r\n  addBtn: HTMLElement;\r\n\r\n  removeEvent: any;\r\n\r\n  constructor() {\r\n    this.center = <HTMLElement>document.querySelector(\".center\");\r\n    this.todoForm = document.querySelector(\".todo__Form\") as HTMLElement;\r\n    this.todoList = document.querySelector(\".todo__List\") as HTMLElement;\r\n    this.addBtn = document.querySelector(\".todo__submit\") as HTMLElement;\r\n    this.todo__form_input = document.querySelector(\r\n      \".todo__form_input\"\r\n    ) as HTMLInputElement;\r\n  }\r\n\r\n  get _todoText() {\r\n    return this.todo__form_input.value;\r\n  }\r\n\r\n  displayTodos = (todos: Array<todoJSON>) => {\r\n    while (this.todoList.hasChildNodes()) {\r\n      this.todoList.removeChild(<ChildNode>this.todoList.firstChild);\r\n    }\r\n\r\n    todos.forEach(todo => {\r\n      this.li = document.createElement(\"li\") as HTMLElement;\r\n      this.deleteBtn = document.createElement(\"button\") as HTMLElement;\r\n      this.span = document.createElement(\"span\") as HTMLElement;\r\n      this.chkBox = <HTMLInputElement>document.createElement(\"input\");\r\n\r\n      this.icon = document.createElement(\"i\") as HTMLElement;\r\n      this.icon.className += \"far fa-trash-alt delete\";\r\n\r\n      this.deleteBtn.appendChild(this.icon);\r\n      this.deleteBtn.className += \"delete\";\r\n\r\n      this.chkBox.type = \"checkbox\";\r\n      this.chkBox.className += \"check\";\r\n\r\n      this.span.innerText = todo.text;\r\n\r\n      this.li.appendChild(this.span);\r\n      this.li.appendChild(this.chkBox);\r\n      this.li.appendChild(this.deleteBtn);\r\n\r\n      this.li.id = String(todo.id);\r\n\r\n      this.li.addEventListener(\r\n        \"click\",\r\n        e => {\r\n          if ((<Element>e.target).classList.contains(\"delete\")) {\r\n            console.log(\"====================================\");\r\n            console.log((<Element>e.currentTarget).id);\r\n            console.log(\"====================================\");\r\n\r\n            this.removeEvent(Number((<Element>e.currentTarget).id));\r\n          }\r\n        },\r\n        true\r\n      );\r\n\r\n      this.todoList.appendChild(this.li);\r\n\r\n      // const toDoObj = {\r\n      //   text: this._todoText,\r\n      //   id: String(todos.length + 1)\r\n      // };\r\n    });\r\n  };\r\n\r\n  bindAddTodo(handler: any) {\r\n    this.addBtn.addEventListener(\"click\", e => {\r\n      if (this._todoText) {\r\n        handler(this._todoText);\r\n        this.todo__form_input.value = \"\";\r\n      }\r\n    });\r\n  }\r\n\r\n  bindRemoveTodo(handler: any) {\r\n    this.removeEvent = handler;\r\n  }\r\n}\r\n\r\nexport default View;\r\n","export const WEATHER_KEY: string = \"f1be9aa96f21308aa6c1db387568b8d0\";\r\n","import { WEATHER_KEY } from \"../../config\";\r\n\r\nclass WeatherModel {\r\n  private COORDS_STORAGE: string;\r\n  onWeatherUpdate!: Function;\r\n  private baseUrl: string;\r\n  private axiosHelper: AxiosHelper;\r\n\r\n  constructor() {\r\n    this.COORDS_STORAGE = \"coords\";\r\n    this.baseUrl = \"https://api.openweathermap.org/data/2.5\";\r\n\r\n    this.loadCoords();\r\n  }\r\n\r\n  bindWeatherChanged = (callback: Function) => {\r\n    this.onWeatherUpdate = callback;\r\n  };\r\n\r\n  saveCoords = (coordsObj: Object) => {\r\n    localStorage.setItem(this.COORDS_STORAGE, JSON.stringify(coordsObj));\r\n  };\r\n\r\n  handleGeoSuccess = (position: Position): void => {\r\n    const latitude = position.coords.latitude;\r\n    const longitude = position.coords.longitude;\r\n\r\n    const coordsObj = {\r\n      latitude,\r\n      longitude\r\n    };\r\n\r\n    this.saveCoords(coordsObj);\r\n    this.getWeather(latitude, longitude);\r\n  };\r\n\r\n  handleGeoError = () => {\r\n    console.log(\"geo error\");\r\n  };\r\n\r\n  askCoords = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      this.handleGeoSuccess,\r\n      this.handleGeoError\r\n    );\r\n  };\r\n\r\n  loadCoords = () => {\r\n    const loadedCoords = localStorage.getItem(this.COORDS_STORAGE);\r\n\r\n    if (loadedCoords === null) {\r\n      this.askCoords();\r\n    } else {\r\n      const parseCoords = JSON.parse(loadedCoords);\r\n      console.log(parseCoords);\r\n      this.getWeather(parseCoords.latitude, parseCoords.longitude);\r\n    }\r\n  };\r\n\r\n  getWeather = (lat: number, lon: number) => {\r\n    fetch(\r\n      `${this.baseUrl}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_KEY}&units=metric`\r\n    )\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(json => {\r\n        const temperature = json.main.temp;\r\n        const place = json.name;\r\n\r\n        console.log(temperature, place);\r\n        this.onWeatherUpdate(temperature, place);\r\n      });\r\n  };\r\n}\r\n\r\ninterface Position {\r\n  readonly coords: Coordinates;\r\n  readonly timestamp: number;\r\n}\r\n\r\nexport default WeatherModel;\r\n","class WeatherView {\r\n  private weather: HTMLElement;\r\n  constructor() {\r\n    this.weather = <HTMLElement>document.querySelector(\".js-weather\");\r\n  }\r\n\r\n  updateWeatherTxt = (temperature: string, place: string) => {\r\n    this.weather.innerHTML = `${temperature} @ ${place}`;\r\n  };\r\n}\r\n\r\nexport default WeatherView;\r\n","import Model from \"../model/weatherModel\";\r\nimport View from \"../view/weatherView\";\r\n\r\nclass WeatherController {\r\n  weatherView: View;\r\n  weatherModel: Model;\r\n  constructor(weatherView: View, weatherModel: Model) {\r\n    this.weatherView = weatherView;\r\n    this.weatherModel = weatherModel;\r\n\r\n    this.weatherModel.bindWeatherChanged(this.onWeatherUpdate);\r\n  }\r\n\r\n  onWeatherUpdate = (temperature: string, place: string) => {\r\n    this.weatherView.updateWeatherTxt(temperature, place);\r\n  };\r\n}\r\n\r\nexport default WeatherController;\r\n","class BackgroundModel {\r\n  private IMG_NUMBER: number = 3;\r\n  constructor() {}\r\n\r\n  get imgNumber() {\r\n    return this.IMG_NUMBER;\r\n  }\r\n\r\n  createRandomBG = () => {\r\n    const num = Math.floor(Math.random() * this.IMG_NUMBER);\r\n    console.log(num);\r\n\r\n    return num;\r\n  };\r\n}\r\n\r\nexport default BackgroundModel;\r\n","class BackgroundView {\r\n  private body: HTMLElement;\r\n  private imgArr!: Array<string>;\r\n  constructor() {\r\n    this.body = <HTMLElement>document.querySelector(\"body\");\r\n    this.imgArr = [\r\n      \"https://cdn.pixabay.com/photo/2020/02/03/17/39/beach-4816249_960_720.jpg\"\r\n    ];\r\n  }\r\n\r\n  paintImg(imgNumber: number) {\r\n    const newImg = new Image();\r\n    newImg.src = `../../../assets/img/bg${imgNumber + 1}.jpg`;\r\n    // newImg.src = this.imgArr[imgNumber];\r\n    newImg.classList.add(\"bgImg\");\r\n\r\n    console.log(newImg.src);\r\n\r\n    this.body.prepend(newImg);\r\n  }\r\n}\r\n\r\nexport default BackgroundView;\r\n","import BgModel from \"../model/bgModel\";\r\nimport BgView from \"../view/bgView\";\r\n\r\nclass BackgroundController {\r\n  private backgroundModel: BgModel;\r\n  private backgroundView: BgView;\r\n\r\n  constructor(view: BgView, model: BgModel) {\r\n    this.backgroundView = view;\r\n    this.backgroundModel = model;\r\n\r\n    this.onBackgroundChanged();\r\n  }\r\n\r\n  onBackgroundChanged = () => {\r\n    this.backgroundView.paintImg(this.backgroundModel.createRandomBG());\r\n  };\r\n}\r\n\r\nexport default BackgroundController;\r\n","import Controller from \"./controller/controller\";\r\nimport TodoModel from \"./model/todoModel\";\r\nimport TodoView from \"./view/todoView\";\r\nimport WeatherModel from \"./model/weatherModel\";\r\nimport WeatherView from \"./view/weatherView\";\r\nimport WeatherController from \"./controller/weatherController\";\r\nimport BgModel from \"./model/bgModel\";\r\nimport BgView from \"./view/bgView\";\r\nimport BgController from \"./controller/bgController\";\r\n\r\nconst todoApp = new Controller(new TodoView(), new TodoModel());\r\nconst weatherApp = new WeatherController(new WeatherView(), new WeatherModel());\r\nconst backgroundApp = new BgController(new BgView(), new BgModel());\r\n"]}